name: Build and release Caddy

on:
  push:
    branches: [ main ]
    tags:
      - 'v*.*.*'
  pull_request:
  workflow_dispatch:

permissions:
  contents: write
  packages: write

jobs:
  build-arm64:
    name: Build Caddy (arm64)
    runs-on: ubuntu-24.04-arm
    strategy:
      matrix:
        goos: [linux, windows, darwin]
        goarch: [arm64, riscv64]
        libc: [glibc, musl]
        exclude:
          - goos: darwin
            libc: musl
          - goos: windows
            libc: musl
          - goos: windows
            goarch: riscv64
          - goos: darwin
            goarch: riscv64
          # - goos: linux
          #   goarch: riscv64
          - goos: linux
            goarch: riscv64
            libc: glibc
    steps:
      - uses: actions/checkout@v4
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version-file: 'src/go.mod'
      - run: go version
      - name: Install cross-compilers
        run: |
          sudo apt-get update
          sudo apt-get install -y musl-tools gcc-riscv64-linux-gnu curl xz-utils
          # Try to install riscv64-linux-musl-gcc (cross-compiler) from apt
          sudo apt-get install -y riscv64-linux-musl-gcc || true
          # Check if riscv64-linux-musl-gcc is available
          if ! command -v riscv64-linux-musl-gcc >/dev/null 2>&1; then
            # Try to download a cross-compiler from musl.cc matching the runner architecture
            ARCH=$(uname -m)
            if [ "$ARCH" = "aarch64" ]; then
              CROSS_TGZ="aarch64-linux-musl-cross.tgz"
              CROSS_DIR="/opt/aarch64-linux-musl-cross"
              curl -LO https://musl.cc/$CROSS_TGZ
              sudo tar -C /opt -xzf $CROSS_TGZ
              rm $CROSS_TGZ
              export PATH="$CROSS_DIR/bin:$PATH"
            elif [ "$ARCH" = "x86_64" ]; then
              echo "No riscv64-linux-musl cross-compiler available for x86_64 from musl.cc. Skipping riscv64+musl build."
              exit 0
            else
              echo "Unsupported runner architecture: $ARCH"
              exit 0
            fi
          fi
      - name: Build
        working-directory: src
        env:
          MUSL_PATH: /opt/riscv64-linux-musl-cross/bin
        run: |
          mkdir -p ../build
          if [ "${{ matrix.goarch }}" = "riscv64" ]; then
            if [ "${{ matrix.libc }}" = "musl" ]; then
              export PATH="$MUSL_PATH:$PATH"
              export CC=riscv64-linux-musl-gcc
              export CGO_ENABLED=1
              OUTNAME=../build/caddy-${{ matrix.goos }}-riscv64-musl
            else
              export CC=riscv64-linux-gnu-gcc
              export CGO_ENABLED=1
              OUTNAME=../build/caddy-${{ matrix.goos }}-riscv64-glibc
            fi
          elif [ "${{ matrix.libc }}" = "musl" ]; then
            export CC=musl-gcc
            export CGO_ENABLED=1
            OUTNAME=../build/caddy-${{ matrix.goos }}-${{ matrix.goarch }}-musl
          else
            export CGO_ENABLED=0
            OUTNAME=../build/caddy-${{ matrix.goos }}-${{ matrix.goarch }}-glibc
          fi
          GOOS=${{ matrix.goos }} GOARCH=${{ matrix.goarch }} go build -o "$OUTNAME" .
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: caddy-${{ matrix.goos }}-${{ matrix.goarch }}-${{ matrix.libc }}
          path: build/caddy-${{ matrix.goos }}-${{ matrix.goarch }}-${{ matrix.libc }}

  build-other:
    name: Build Caddy (x86_64)
    runs-on: ubuntu-latest
    strategy:
      matrix:
        goos: [linux, windows, darwin]
        goarch: [amd64]
        libc: [glibc, musl]
        exclude:
          - goos: darwin
            libc: musl
          - goos: windows
            libc: musl
    steps:
      - uses: actions/checkout@v4
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version-file: 'src/go.mod'
      - run: go version
      - name: Install cross-compilers
        run: |
          sudo apt-get update
          sudo apt-get install -y musl-tools gcc-riscv64-linux-gnu curl xz-utils
          # Try to install riscv64-linux-musl-gcc (cross-compiler) from apt
          sudo apt-get install -y riscv64-linux-musl-gcc || true
          # Check if riscv64-linux-musl-gcc is available
          if ! command -v riscv64-linux-musl-gcc >/dev/null 2>&1; then
            # Try to download a cross-compiler from musl.cc matching the runner architecture
            ARCH=$(uname -m)
            if [ "$ARCH" = "aarch64" ]; then
              CROSS_TGZ="aarch64-linux-musl-cross.tgz"
              CROSS_DIR="/opt/aarch64-linux-musl-cross"
              curl -LO https://musl.cc/$CROSS_TGZ
              sudo tar -C /opt -xzf $CROSS_TGZ
              rm $CROSS_TGZ
              export PATH="$CROSS_DIR/bin:$PATH"
            elif [ "$ARCH" = "x86_64" ]; then
              echo "No riscv64-linux-musl cross-compiler available for x86_64 from musl.cc. Skipping riscv64+musl build."
              exit 0
            else
              echo "Unsupported runner architecture: $ARCH"
              exit 0
            fi
          fi
      - name: Build
        working-directory: src
        env:
          MUSL_PATH: /opt/riscv64-linux-musl-cross/bin
        run: |
          mkdir -p ../build
          if [ "${{ matrix.goarch }}" = "riscv64" ]; then
            if [ "${{ matrix.libc }}" = "musl" ]; then
              export PATH="$MUSL_PATH:$PATH"
              export CC=riscv64-linux-musl-gcc
              export CGO_ENABLED=1
              OUTNAME=../build/caddy-${{ matrix.goos }}-riscv64-musl
            else
              export CC=riscv64-linux-gnu-gcc
              export CGO_ENABLED=1
              OUTNAME=../build/caddy-${{ matrix.goos }}-riscv64-glibc
            fi
          elif [ "${{ matrix.libc }}" = "musl" ]; then
            export CC=musl-gcc
            export CGO_ENABLED=1
            OUTNAME=../build/caddy-${{ matrix.goos }}-${{ matrix.goarch }}-musl
          else
            export CGO_ENABLED=0
            OUTNAME=../build/caddy-${{ matrix.goos }}-${{ matrix.goarch }}-glibc
          fi
          GOOS=${{ matrix.goos }} GOARCH=${{ matrix.goarch }} go build -o "$OUTNAME" .
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: caddy-${{ matrix.goos }}-${{ matrix.goarch }}-${{ matrix.libc }}
          path: build/caddy-${{ matrix.goos }}-${{ matrix.goarch }}-${{ matrix.libc }}
  release:
    name: Release
    needs: [build-arm64, build-other]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - uses: actions/checkout@v4

      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: Generate release notes
        id: changelog
        uses: mikepenz/release-changelog-builder-action@v4
        with:
          configuration: '.github/changelog-config.json'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          body: ${{ steps.changelog.outputs.changelog }}
          files: ./artifacts/**/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}


