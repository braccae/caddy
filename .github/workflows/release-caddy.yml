name: Release Caddy

on:
  push:
    branches: [ main ]
    paths:
      - "src/**"
  workflow_dispatch:

permissions:
  contents: write
  packages: write

jobs:
  build-arm64:
    name: Build Caddy (arm64)
    runs-on: ubuntu-24.04-arm
    continue-on-error: true
    strategy:
      fail-fast: false
      matrix:
        include:
          - goos: linux
            goarch: arm
            goarm: 6
          - goos: linux
            goarch: arm
            goarm: 7
        goos: [linux, windows, darwin]
        goarch: [arm64, riscv64]
        exclude:
          - goos: windows
            goarch: riscv64
          - goos: darwin
            goarch: riscv64
    steps:
      - uses: actions/checkout@v5
      - name: Setup Go
        uses: actions/setup-go@v6
        with:
          go-version-file: 'src/go.mod'
          cache-dependency-path: src/go.sum
      - run: go version
      - name: Build
        working-directory: src
        run: |
          mkdir -p ../build
          OUTNAME=../build/caddy-${{ matrix.goos }}-${{ matrix.goarch }}
          if [ "${{ matrix.goarch }}" = "arm" ]; then
            OUTNAME=../build/caddy-${{ matrix.goos }}-arm32v${{ matrix.goarm }}
            GOARM=${{ matrix.goarm }}
          elif [ "${{ matrix.goarch }}" = "arm64" ]; then
            OUTNAME=../build/caddy-${{ matrix.goos }}-arm64v8
          elif [ "${{ matrix.goarch }}" = "amd64" ]; then
            OUTNAME=../build/caddy-${{ matrix.goos }}-amd64v1
          elif [ "${{ matrix.goarch }}" = "riscv64" ]; then
            OUTNAME=../build/caddy-${{ matrix.goos }}-riscv64
          fi
          GOOS=${{ matrix.goos }} GOARCH=${{ matrix.goarch }} CGO_ENABLED=0 go build -o "$OUTNAME" .
      - name: Upload artifact (arm)
        if: ${{ matrix.goarch == 'arm' }}
        uses: actions/upload-artifact@v5
        with:
          name: caddy-${{ matrix.goos }}-arm32v${{ matrix.goarm }}
          path: build/caddy-${{ matrix.goos }}-arm32v${{ matrix.goarm }}
      - name: Upload artifact (arm64)
        if: ${{ matrix.goarch == 'arm64' }}
        uses: actions/upload-artifact@v5
        with:
          name: caddy-${{ matrix.goos }}-arm64v8
          path: build/caddy-${{ matrix.goos }}-arm64v8
      - name: Upload artifact (riscv64)
        if: ${{ matrix.goarch == 'riscv64' }}
        uses: actions/upload-artifact@v5
        with:
          name: caddy-${{ matrix.goos }}-riscv64
          path: build/caddy-${{ matrix.goos }}-riscv64
      - name: Upload artifact (other non-arm)
        if: ${{ matrix.goarch != 'arm' && matrix.goarch != 'arm64' && matrix.goarch != 'riscv64' }}
        uses: actions/upload-artifact@v5
        with:
          name: caddy-${{ matrix.goos }}-${{ matrix.goarch }}
          path: build/caddy-${{ matrix.goos }}-${{ matrix.goarch }}

  build-other:
    name: Build Caddy (x86_64)
    runs-on: ubuntu-latest
    continue-on-error: true
    strategy:
      fail-fast: false
      matrix:
        goos: [linux, windows]
        goarch: [amd64]
    steps:
      - uses: actions/checkout@v5
      - name: Setup Go
        uses: actions/setup-go@v6
        with:
          go-version-file: 'src/go.mod'
          cache-dependency-path: src/go.sum
      - run: go version
      - name: Build
        working-directory: src
        run: |
          mkdir -p ../build
          OUTNAME=../build/caddy-${{ matrix.goos }}-amd64v1
          GOOS=${{ matrix.goos }} GOARCH=${{ matrix.goarch }} CGO_ENABLED=0 go build -o "$OUTNAME" .
      - name: Upload artifact
        uses: actions/upload-artifact@v5
        with:
          name: caddy-${{ matrix.goos }}-amd64v1
          path: build/caddy-${{ matrix.goos }}-amd64v1

  release:
    name: Release
    needs: [build-arm64, build-other]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Prepare release version & changelog
        id: prepare_release
        run: |
          set -e
          git fetch --tags --prune || true
          
          # Get all version tags sorted by version number
          ALL_TAGS=$(git tag -l "v[0-9]*.[0-9]*.[0-9]*" | sort -V)
          LAST_TAG=$(echo "$ALL_TAGS" | tail -n1)
          
          if [ -z "$LAST_TAG" ]; then
            LAST_VERSION="0.0.0"
          else
            LAST_VERSION=${LAST_TAG#v}
          fi
          
          CADDY_MAJOR=$(grep -Eo 'github.com/caddyserver/caddy/v[0-9]+' src/go.mod | head -n1 | grep -Eo 'v[0-9]+' | tr -d 'v')
          IFS=. read -r LAST_MAJ LAST_MIN LAST_PATCH <<< "$LAST_VERSION"
          
          if [ "$CADDY_MAJOR" != "$LAST_MAJ" ]; then
            NEW_MAJ=$CADDY_MAJOR
            NEW_MIN=0
            NEW_PATCH=0
          else
            NEW_MAJ=$LAST_MAJ
            git diff "$LAST_TAG"...HEAD -- src/go.mod > /tmp/gomod.diff || true
            HARD_CHANGED=$(grep -E '^[+-][[:space:]]+[[:alnum:]./+-]+ v' /tmp/gomod.diff | grep -v '// indirect' || true)
            INDIRECT_CHANGED=$(grep -E '^[+-][[:space:]]+[[:alnum:]./+-]+ v' /tmp/gomod.diff | grep '// indirect' || true)
            
            if [ -n "$HARD_CHANGED" ] || [ -n "$INDIRECT_CHANGED" ]; then
              # Start with next minor version
              NEW_MIN=$((LAST_MIN + 1))
              NEW_PATCH=0
            else
              # Start with next patch version
              NEW_MIN=$LAST_MIN
              NEW_PATCH=$((LAST_PATCH + 1))
            fi
          fi
          
          # Ensure we don't reuse an existing version
          while git tag -l "v${NEW_MAJ}.${NEW_MIN}.${NEW_PATCH}" | grep -q .; do
            # If this version exists, increment patch level
            NEW_PATCH=$((NEW_PATCH + 1))
          done
          NEW_TAG=v${NEW_MAJ}.${NEW_MIN}.${NEW_PATCH}
          echo "new_tag=$NEW_TAG" >> $GITHUB_OUTPUT
          echo "Computed next version: $NEW_TAG"

          # Gather Caddy changelog
          if [ -n "$LAST_TAG" ]; then
            CADDY_CHANGELOG=$(git log "$LAST_TAG"...HEAD --pretty=format:'- %h %s')
          else
            CADDY_CHANGELOG=$(git log --pretty=format:'- %h %s')
          fi

          # Gather dependency changelogs
          git diff "$LAST_TAG"...HEAD -- src/go.mod > /tmp/gomod.diff || true
          HARD_CHANGED=$(grep -E '^[+-][[:space:]]+[[:alnum:]./+-]+ v' /tmp/gomod.diff | grep -v '// indirect' || true)
          if [ -n "$HARD_CHANGED" ]; then
            MODULES=$(echo "$HARD_CHANGED" | sed -E 's/^[+-][[:space:]]+([[:alnum:]./+-]+) v.*/\1/' | sort -u)
          else
            # run in src to locate go.mod
            MODULES=$(cd src && go list -m -f '{{if not .Indirect}}{{.Path}}{{end}}' all)
          fi

          DEP_CHANGELOG=""
          for mod in $MODULES; do
            case "$mod" in
              github.com/*/*) repo=$(echo $mod | sed -E 's|github.com/([^/]+/[^/]+).*|\1|') ;;
              *) continue ;;
            esac
            # get version inside src
            vers=$(cd src && go list -m -f '{{if eq .Path "'"$mod"'"}}{{.Version}}{{end}}' all)
            # Try fetch changelog by tag, else latest
            notes=$(curl -sSL -H "Accept: application/vnd.github.v3+json" -H "Authorization: Bearer $GITHUB_TOKEN" "https://api.github.com/repos/$repo/releases/tags/$vers" | jq -r '.body // empty') || true
            if [ -z "$notes" ]; then
              notes=$(curl -sSL -H "Accept: application/vnd.github.v3+json" -H "Authorization: Bearer $GITHUB_TOKEN" "https://api.github.com/repos/$repo/releases/latest" | jq -r '.body // empty') || true
            fi
            if [ -z "$notes" ]; then
              notes="No changelog available"
            fi
            DEP_CHANGELOG="$DEP_CHANGELOG\n### $repo@$vers\n$notes\n"
          done

          # Compose full changelog
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "## Caddy Changelog" >> $GITHUB_OUTPUT
          echo "$CADDY_CHANGELOG" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo "## Dependency Changelogs" >> $GITHUB_OUTPUT
          echo -e "$DEP_CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Download all build artifacts
        uses: actions/download-artifact@v6
        with:
          path: ./artifacts

      - name: Create GitHub Release
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ steps.prepare_release.outputs.new_tag }}
          name: ${{ steps.prepare_release.outputs.new_tag }}
          body: ${{ steps.prepare_release.outputs.changelog }}
          artifacts: ./artifacts/**/*
          token: ${{ secrets.GITHUB_TOKEN }}